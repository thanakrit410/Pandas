import json
import os
import urllib3
import re

# ‡πÉ‡∏ä‡πâ HTTP client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
http = urllib3.PoolManager()

# Webhook URL (‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Lambda Environment Variable)
GOOGLE_CHAT_WEBHOOK_URL = os.getenv('GOOGLE_CHAT_WEBHOOK_URL')

# API Key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Chat API
GOOGLE_CHAT_API_KEY = os.getenv('GOOGLE_CHAT_API_KEY')  # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô Lambda Environment Variable

def send_google_chat_notify(message):
    """‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Chat ‡∏ú‡πà‡∏≤‡∏ô Webhook."""
    if not GOOGLE_CHAT_WEBHOOK_URL:
        print("Error: GOOGLE_CHAT_WEBHOOK_URL is not set.")
        return 500

    headers = {
        'Content-Type': 'application/json'
    }
    payload = {
        'text': message
    }

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° API Key ‡πÉ‡∏ô URL
    url = f"{GOOGLE_CHAT_WEBHOOK_URL}?key={GOOGLE_CHAT_API_KEY}"

    response = http.request(
        'POST',
        url,
        body=json.dumps(payload),
        headers=headers
    )

    return response.status

def send_dm_to_bot(message):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó 1:1 ‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏ú‡πà‡∏≤‡∏ô Chat API ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ API Key."""
    bot_space_id = 'spaces/89Mip8AAAAE'  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏° space id ‡∏Ç‡∏≠‡∏á 1:1 chat ‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó
    if not bot_space_id:
        print("Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö Google Chat Bot Space ID.")
        return 500

    if not GOOGLE_CHAT_API_KEY:
        print("Error: GOOGLE_CHAT_API_KEY is not set.")
        return 500

    headers = {
        'Content-Type': 'application/json'
    }
    payload = {
        'text': message
    }

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° API Key ‡πÉ‡∏ô URL
    url = f'https://chat.googleapis.com/v1/{bot_space_id}/messages?key={GOOGLE_CHAT_API_KEY}'

    response = http.request(
        'POST',
        url,
        body=json.dumps(payload),
        headers=headers
    )

    return response.status

def format_message(sns_message_data, sns_topic_arn):
    """‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó CloudWatch Alarm."""
    alarm_name = sns_message_data.get('AlarmName', 'No Alarm Name')
    new_state = sns_message_data.get('NewStateValue', 'Unknown State')
    reason = sns_message_data.get('NewStateReason', 'No reason provided')

    app_name = get_app_name_from_sns_arn(sns_topic_arn)

    if new_state == "OK":
        message = (
            f"‚úÖ Alarm Resolved ‚úÖ\nApp Name: {app_name}\nAlarm: {alarm_name}\nState: {new_state}\nReason: {reason}\n"
        )
    else:
        message = (
            f"üö® General Alarm üö®\nApp Name: {app_name}\nAlarm: {alarm_name}\nState: {new_state}\nReason: {reason}\n"
        )
    return message

def get_app_name_from_sns_arn(topic_arn):
    try:
        match = re.search(r'PRD_(\w+?)_', topic_arn)
        if match:
            return match.group(1)
        else:
            print("Pattern not found")
            return "UNKNOWN_APP_NAME"
    except Exception as e:
        print(f"An error occurred: {e}")
        return "UNKNOWN_APP_NAME"

def lambda_handler(event, context):
    """Lambda handler ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å SNS topic."""
    sns_message = event['Records'][0]['Sns']['Message']
    sns_topic_arn = event['Records'][0]['Sns']['TopicArn']

    print(f"SNS Message: {sns_message}")

    sns_message_data = json.loads(sns_message)
    message = format_message(sns_message_data, sns_topic_arn)

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Chat (Webhook)
    status = send_google_chat_notify(message)

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á 1:1 ‡∏Å‡∏±‡∏ö Bot
    dm_status = send_dm_to_bot(message)

    return {
        'statusCode': status,
        'body': json.dumps(f'Webhook response: {status}, Bot DM response: {dm_status}')
    }

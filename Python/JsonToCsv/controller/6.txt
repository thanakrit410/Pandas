import json
import os
import boto3
import time
from openpyxl import Workbook
from openpyxl.styles import Border, Side, PatternFill, Alignment

# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AWS S3
S3_BUCKET_NAME = "uat-autolist-resource-bucket"
S3_FILE_NAME = "aws_instances_and_tasks.xlsx"
TMP_FILE_PATH = "/tmp/" + S3_FILE_NAME

# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á AWS Clients
s3_client = boto3.client("s3")
ec2_client = boto3.client("ec2")
rds_client = boto3.client("rds")
ecs_client = boto3.client("ecs")
ssm_client = boto3.client("ssm")

# üîπ ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
border = Border(
    left=Side(border_style="thin"),
    right=Side(border_style="thin"),
    top=Side(border_style="thin"),
    bottom=Side(border_style="thin")
)

# üîπ ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
red_fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å Bytes ‡πÄ‡∏õ‡πá‡∏ô GiB
def bytes_to_gib(bytes_value):
    return bytes_value / (1024 ** 3)  # ‡πÅ‡∏õ‡∏•‡∏á Bytes ‡πÄ‡∏õ‡πá‡∏ô GiB

def get_disk_info(instance_id, platform):
    try:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Windows ‡πÉ‡∏ä‡πâ PowerShell
        if platform == "windows":
            command = "Get-PSDrive -Name C | Select-Object @{Name='FreeSpace';Expression={$_.Used}} | Format-Table -HideTableHeaders"
            document_name = "AWS-RunPowerShellScript"
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Linux ‡πÉ‡∏ä‡πâ Shell Script
            command = "df -B 1 --output=avail / | tail -n 1"  # ‡πÉ‡∏ä‡πâ -B 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô Bytes
            document_name = "AWS-RunShellScript"

        response = ssm_client.send_command(
            InstanceIds=[instance_id],
            DocumentName=document_name,
            Parameters={"commands": [command]}
        )
        command_id = response['Command']['CommandId']
        
        time.sleep(5)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
        output = ssm_client.get_command_invocation(
            CommandId=command_id,
            InstanceId=instance_id
        )
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Bytes ‡πÄ‡∏õ‡πá‡∏ô GiB
        free_space_bytes = int(output.get("StandardOutputContent", "0").strip())
        free_space_gib = bytes_to_gib(free_space_bytes)
        
        return f"{free_space_gib:.2f} GiB"  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô GiB
    except Exception as e:
        print(f"Error: {str(e)}")
        return "N/A"

def get_os_version(instance_id, platform):
    try:
        if platform == "windows":
            command = 'systeminfo | findstr /B /C:"OS Name" /C:"OS Version"'
            document_name = "AWS-RunPowerShellScript"
        else:
            command = 'cat /etc/os-release | grep PRETTY_NAME | cut -d "=" -f2 | tr -d \'"\''
            document_name = "AWS-RunShellScript"

        response = ssm_client.send_command(
            InstanceIds=[instance_id],
            DocumentName=document_name,
            Parameters={"commands": [command]}
        )
        command_id = response['Command']['CommandId']
        
        time.sleep(10)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
        
        output = ssm_client.get_command_invocation(
            CommandId=command_id,
            InstanceId=instance_id
        )
        
        os_version = output.get("StandardOutputContent", "N/A").strip()
        return os_version

    except Exception as e:
        print(f"Error fetching OS version for {instance_id}: {str(e)}")
        return "N/A"


# üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EC2 Instances
def get_ec2_instances():
    response = ec2_client.describe_instances()
    instances = []
    
    # ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á instance ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ lookup CPU/Memory
    instance_types = list(set(
        instance["InstanceType"]
        for reservation in response["Reservations"]
        for instance in reservation["Instances"]
    ))

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Instance Type (CPU / Memory)
    instance_type_info = {}
    if instance_types:
        type_response = ec2_client.describe_instance_types(InstanceTypes=instance_types)
        for it in type_response["InstanceTypes"]:
            instance_type_info[it["InstanceType"]] = {
                "vCPU": it["VCpuInfo"]["DefaultVCpus"],
                "Memory": it["MemoryInfo"]["SizeInMiB"]  # ‡∏Ç‡∏ô‡∏≤‡∏î RAM (MiB)
            }

    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Instance
    for reservation in response["Reservations"]:
        for instance in reservation["Instances"]:
            instance_id = instance["InstanceId"]
            instance_type = instance["InstanceType"]
            cpu_memory = instance_type_info.get(instance_type, {"vCPU": "N/A", "Memory": "N/A"})

            platform = instance.get("Platform", "Linux")

            disk_size = "N/A"  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô "N/A"
            if "BlockDeviceMappings" in instance:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ BlockDeviceMappings ‡∏°‡∏µ EBS ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                ebs = instance["BlockDeviceMappings"]
                if ebs:
                    disk_size = ebs[0].get("Ebs", {}).get("VolumeSize", "N/A")  # ‡∏î‡∏∂‡∏á VolumeSize
            
            free_space = get_disk_info(instance_id, platform)

            os_version = get_os_version(instance_id, platform)
            
            instance_data = {
                "InstanceID": instance["InstanceId"],
                "State": instance["State"]["Name"],
                "InstanceType": instance_type,
                "vCPU": cpu_memory["vCPU"],  # ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô vCPU
                "Memory (MiB)": cpu_memory["Memory"],  # ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î RAM (MiB)
                "PrivateIP": instance.get("PrivateIpAddress", "N/A"),
                "Name": next((tag["Value"] for tag in instance.get("Tags", []) if tag["Key"] == "Name"), "N/A"),
                "Project": next((tag["Value"] for tag in instance.get("Tags", []) if tag["Key"] == "Project"), "N/A"),
                "FreeSpace": free_space,
                "Platform" : instance.get("Platform", "linux"),
                "OS Version": os_version,
            }
            instances.append(instance_data)
    
    return instances


# üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RDS Instances
def get_rds_instances():
    response = rds_client.describe_db_instances()
    instances = []
    for db_instance in response["DBInstances"]:
        instance_data = {
            "InstanceID": db_instance["DBInstanceIdentifier"],
            "State": db_instance["DBInstanceStatus"],
            "InstanceType": db_instance["DBInstanceClass"],
            "Engine": db_instance["Engine"],
            "EngineVersion": db_instance["EngineVersion"],
            "PrivateIP": db_instance.get("Endpoint", {}).get("Address", "N/A"),
            "Project": next(
                (tag["Value"] for tag in db_instance.get("TagList", []) if tag["Key"] == "Project"),
                "N/A"
            )
        }
        instances.append(instance_data)
    return instances

# üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ECS Tasks
def get_ecs_tasks():
    clusters = ecs_client.list_clusters()["clusterArns"]
    ecs_tasks = []
    for cluster_arn in clusters:
        cluster_name = cluster_arn.split("/")[-1]  # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Cluster ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        task_arns = ecs_client.list_tasks(cluster=cluster_name)["taskArns"]

        if not task_arns:
            continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Task

        tasks_info = ecs_client.describe_tasks(cluster=cluster_name, tasks=task_arns)["tasks"]

        for task in tasks_info:
            tags = ecs_client.list_tags_for_resource(resourceArn=task["taskArn"]).get("tags", [])
            project_name = next((tag["value"] for tag in tags if tag["key"] == "Project"), "N/A")

            ecs_tasks.append({
                "TaskARN": task["taskArn"],
                "Cluster": cluster_name,
                "Service": task["group"],  # ‡∏ä‡∏∑‡πà‡∏≠ Service ‡∏ó‡∏µ‡πà Task ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î
                "CPU": task.get("cpu", "N/A"),
                "Memory": task.get("memory", "N/A"),
                "Project": project_name  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Project ‡∏à‡∏≤‡∏Å Tags
            })
    return ecs_tasks

# üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå Excel
def save_to_excel(ec2_instances, rds_instances, ecs_tasks):
    wb = Workbook()

    if "Sheet" in wb.sheetnames:
        wb.remove(wb["Sheet"])

    # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EC2 Instances
    ws_ec2 = wb.create_sheet(title="EC2 Instances")
    columns_ec2 = ["InstanceID", "State", "InstanceType", "vCPU", "Memory (MiB)", "PrivateIP", "Name", "Project", "FreeSpace", "Platform", "OS Version"]
    ws_ec2.append(columns_ec2)
    for instance in ec2_instances:
        row_data = [instance.get(col, "N/A") for col in columns_ec2]
        ws_ec2.append(row_data)
    apply_styles(ws_ec2, columns_ec2)

    # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RDS Instances
    ws_rds = wb.create_sheet(title="RDS Instances")
    columns_rds = ["InstanceID", "State", "InstanceType", "PrivateIP", "Project", "Engine","EngineVersion"]
    ws_rds.append(columns_rds)
    for instance in rds_instances:
        row_data = [instance.get(col, "N/A") for col in columns_rds]
        ws_rds.append(row_data)
    apply_styles(ws_rds, columns_rds)

    # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ECS Tasks
    ws_ecs = wb.create_sheet(title="ECS Tasks")
    columns_ecs = ["TaskARN", "Cluster", "Service", "CPU", "Memory", "Project"]
    ws_ecs.append(columns_ecs)
    for task in ecs_tasks:
        row_data = [task.get(col, "N/A") for col in columns_ecs]
        ws_ecs.append(row_data)
    apply_styles(ws_ecs, columns_ecs)

    # üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    wb.save(TMP_FILE_PATH)
    return TMP_FILE_PATH

# üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ã‡∏•‡∏•‡πå
def apply_styles(ws, columns):
    for row in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=1, max_col=len(columns)):
        for cell in row:
            cell.border = border
            cell.alignment = Alignment(wrap_text=True, vertical="top")
            if cell.value in ["N/A", None, ""]:
                cell.fill = red_fill

    for col in ws.columns:
        max_length = max(len(str(cell.value)) for cell in col if cell.value) + 2
        ws.column_dimensions[col[0].column_letter].width = max_length

# üìå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà S3
def upload_to_s3(file_path):
    s3_client.upload_file(file_path, S3_BUCKET_NAME, S3_FILE_NAME)
    s3_url = f"https://{S3_BUCKET_NAME}.s3.amazonaws.com/{S3_FILE_NAME}"
    return s3_url

# üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Lambda
def lambda_handler(event, context):
    ec2_instances = get_ec2_instances()
    rds_instances = get_rds_instances()
    ecs_tasks = get_ecs_tasks()

    excel_path = save_to_excel(ec2_instances, rds_instances, ecs_tasks)
    s3_link = upload_to_s3(excel_path)

    return {
        "statusCode": 200,
        "body": json.dumps({
            "ec2_instances": ec2_instances,
            "rds_instances": rds_instances,
            "ecs_tasks": ecs_tasks
        }, indent=4),
        "s3_link": s3_link
    }
